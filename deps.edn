{:paths ["src" "classes" "resources"]
 :deps {org.clojure/clojure            {:mvn/version "1.10.2"}
        techascent/tech.ml.dataset     {:mvn/version "5.19-SNAPSHOT"}

        ;; I tried parquet - no dice; it always pulls in some jni crap.

        org.apache.parquet/parquet-hadoop {:mvn/version "1.12.0"
                                           :exclusions [org.slf4j/slf4j-log4j12]}
        org.apache.hadoop/hadoop-common {:mvn/version "3.3.0"
                                         :exclusions [org.slf4j/slf4j-log4j12]}
        org.apache.hadoop/hadoop-mapreduce-client-core {:mvn/version "3.3.0"
                                                        :exclusions [org.slf4j/slf4j-log4j12]}}
 :aliases
 {:jdk-16
  {:jvm-opts ["--add-modules" "jdk.incubator.foreign"
              "-Dforeign.restricted=permit" "--add-opens"
              "java.base/java.lang=ALL-UNNAMED"]}
  :depstar
  {:replace-deps {com.github.seancorfield/depstar {:mvn/version "2.0.193"}}
   :ns-default hf.depstar
   :aliases [:graal-compile]
   :exec-fn hf.depstar/uberjar
   :exec-args {:group-id "cnuernber"
               :artifact-id "ds-graal"
               :version "1.00-beta-1"
               :sync-pom true
               :aot true
               :compile-ns [ds-graal.main]
               :main-class ds-graal.main
               :jar "target/ds-graal-uber.jar"
               ;;Disable tensor code generation and ensure direct linking.
               :jvm-opts ["-Dtech.v3.datatype.graal-native=true"
                          "-Dclojure.compiler.direct-linking=true"
                          "-Dclojure.spec.skip-macros=true"]}}}}
